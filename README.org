* Entipe
Entipe tries to provide entity persistence for web applications.
Unlike other approaches it concentrates on entities.  Entities are
defined by a database schema.  A web application can read and write
entities and their attributes but can not define new entities or
modify the database schema.

** Design
Entipe consists of two parts: a client library written in JavaScript
and a server.  The prototype for the reference server is implemented
as a CGI script in Perl.  Other server implementations will follow
after version 1.0 has been finished.

An application has to load the Entipe client library and has to query
the Entipe server for the database schema.  This can be done by two
script tags in the web page.

#+BEGIN_SRC html
<script src="entipe.js"></script>
<script src="entipe.cgi?demo"></script>
#+END_SRC

The GET request to the Entipe server reads the database schema and
returns a JavaScript schema definition, which might look like this:

#+BEGIN_SRC javascript
var demo = new Schema("http://localhost/entipe.cgi?demo",
                      {"address":["street","locality","country"],
                       "person":["firstname","lastname"]});
#+END_SRC

The above code will create a schema object called demo.  The schema
object can be use to create entities.

#+BEGIN_SRC javascript
peter = new demo.person({"firstname":"Peter", "lastname":"Pan"})
-> Entity {}
peter.firstname
-> "Peter"
peter.lastname = "Parker"
-> "Parker"
peter.lastname
-> "Parker"
#+END_SRC

The Entipe client sends queries to the Entipe server using a SQL
subset with some Entipe specific extensions.  The Entipe server sends
JSON encoded data to the Entipe client.  The Entipe server works as a
proxy, parsing the Entipe specific SQL and translating it into
database specific SQL.  The Entipe server has to validate the client
requests to reject requests the client is not allowed to query.  This
implies all DDL statements.


** Development Setup CGI
The development configuration is insecure, because all files are in
the document root of the web server.  This means that files are
publicly accessible though the web server.  The setup is intended only
for development using only public data.

*** Install
The following configuration has been tested with Debian 8.2.

#+BEGIN_SRC sh
sudo apt-get install apache2
sudo a2enmod ssl
sudo mkdir -m 755 /var/www/entipe
sudo chown $(id -u).$(id -g) /var/www/entipe
git clone https://github.com/ceving/entipe.git /var/www/entipe
sudo ln -s /var/www/entipe/demo.debian.site /etc/apache2/sites-available/entipe.conf
sudo a2ensite entipe
sudo service apache2 reload
#+END_SRC

Next the demo can be accessed via [[http://localhost/demo.html][http://localhost/demo.html]].

*** Uninstall
Execute the following to uninstall the demo.

#+BEGIN_SRC sh
sudo a2dissite entipe
sudo rm /etc/apache2/sites-available/entipe.conf
sudo rm -rf /var/www/entipe
sudo apt-get uninstall apache2
#+END_SRC sh




* # :NOEXPORT:ARCHIVE:
Local Variables:
  ispell-local-dictionary: "american"
End:
